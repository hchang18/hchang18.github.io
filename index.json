[{"content":"Summary Read an image file and convert the image from one color space (e.g. BGR to RGB). Select the filter (e.g. Gaussian Kernel function or any custom filter) and apply to the image for smoothing effect. The bigger the kernel size, the blurrier an image will be. To sharpen the image, get the difference between original and blurred images and add back that difference with sharpened ratio of your choice. Getting Started with OpenCV # import libraries import cv2 import numpy as np import matplotlib.pyplot as plt %matplotlib inline # mount the google drive to get my image from google.colab import drive drive.mount(\u0026#39;/content/gdrive\u0026#39;) # Load the image and change color space def load_img(): img = cv2.imread(F\u0026#39;/content/gdrive/tiles.jpg\u0026#39;).astype(np.float32) / 255 img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB) return img def load_img_without_color_convert(): img = cv2.imread(F\u0026#39;/content/gdrive/tiles.jpg\u0026#39;).astype(np.float32) / 255 return img Open CV color was formatted in blue-green-red(BGR), so the image is convered to red-green-blue(RGB) scheme to show the image in a way human perceives the color.\n# Display one image def display_img(img): fig = plt.figure(figsize=(12,10)) ax = fig.add_subplot(111) ax.imshow(img) # Display two images side by side def display_side(img1, img2): fig = plt.figure(figsize=(12, 10)) ax=fig.add_subplot(121) ax.imshow(img1) ax=fig.add_subplot(122) ax.imshow(img2) # Call the function and load the image img = load_img() How to Blur an Image Gaussian kernel function is used to smoothe the image. The aspect ratio of the image is H: 2880, W: 2160, and the kernel function was applied to all three color channels.\n# Gaussian Kernel blurred_backyard = cv2.GaussianBlur(img,ksize=(15,15), / sigmaX=10, sigmaY=10, borderType=4) display_side(img, blurred_backyard) As Kernel size increases, the image blurs more. Given the large image size (2160 by 2880), a small sized kernels such as 3 x 3 and 5 x 5 did not effectively blur the image. The kernel size of 31 x 31 delivered a clear blurring effect for this image. The sigma values in the Gaussian filter implies that there are some variation around its mean value. The larger the sigma values in both x and y, the blurrier an image gets.\nThe left is the original image and the right is the one after smoothing.\nFor the border, reflective border type was chosen. This is because the image showed my backyard and it was safe to assume similar pattern continues (fence, tree, and nextdoor house) beyond what\u0026rsquo;s showing on the image.\n# other kenel functions dst_blur = cv2.blur(img, ksize=(15,15), borderType=4) # median blurring dst_median = cv2.medianBlur(img,5) Note that median blurring is highly effective to remove salt-and-pepper noise in an image.\nHow to Sharpen the Image Sharpening image is more like unblurring an original image. In order to unblur the image, we have to calculate the difference between the original image and blurred image and added the difference back to the original image. After all, both images are 2D matrices of the same size.\nSharpened image = original + sharpened_force x (original - blurred) difference = img - blurred_backyard display_side(img, difference) The right image shows boundaries between objects. Lines are more obvious where contrasting colors are facing each other, like the light grey air conditioner unit and the brown backyard door. The difference is even clearer when multiplied by sharpenend_force. In this case, it is x3.\n# Unblur masking (sharpening the image) # sharp_background = original + (original - blurred) * sharpen_force sharpen_force = 3 sharp_backyard = img + sharpen_force * difference display_side(img, sharp_backyard) ","permalink":"https://hchang18.github.io/posts/2023-03-01-how-to-smooth-image/","summary":"Summary Read an image file and convert the image from one color space (e.g. BGR to RGB). Select the filter (e.g. Gaussian Kernel function or any custom filter) and apply to the image for smoothing effect. The bigger the kernel size, the blurrier an image will be. To sharpen the image, get the difference between original and blurred images and add back that difference with sharpened ratio of your choice. Getting Started with OpenCV # import libraries import cv2 import numpy as np import matplotlib.","title":"How to Blur and Sharpen Color Image"},{"content":"","permalink":"https://hchang18.github.io/about/","summary":"","title":"About Me"}]