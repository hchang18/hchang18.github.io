<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>image processing on Haeyoon&#39;s Blog</title>
    <link>https://hchang18.github.io/tags/image-processing/</link>
    <description>Recent content in image processing on Haeyoon&#39;s Blog</description>
    <image>
      <title>Haeyoon&#39;s Blog</title>
      <url>https://hchang18.github.io/papermod-cover.png</url>
      <link>https://hchang18.github.io/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 14 Mar 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://hchang18.github.io/tags/image-processing/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Histogram Equalization</title>
      <link>https://hchang18.github.io/posts/2023-03-14-histogram-equalizer/</link>
      <pubDate>Tue, 14 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://hchang18.github.io/posts/2023-03-14-histogram-equalizer/</guid>
      <description>Image Histogram and Histogram Equalization Image historgram represents the intensity distribution of an image. X-axis stands for intensity, Y-axis for the number of pixels. Histogram equalization is a method in image processing of contrast adjustment using the image&amp;rsquo;s histogram 1. It stretches out the intensity range of the image.
Use HSV Hue saturation value (HSV) color scale is used to process the intensity separately and to focus on value channel. Thus, I changed the image from BGR to HSV first, and equalized the histogram on value channel only, and finally converted the image from HSV to RGB.</description>
    </item>
    
    <item>
      <title>Perspective Transformation</title>
      <link>https://hchang18.github.io/posts/2023-03-14-perspective-transform/</link>
      <pubDate>Tue, 14 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://hchang18.github.io/posts/2023-03-14-perspective-transform/</guid>
      <description>Perspective Transformation This is a photo of a paper on a table. Is there a way to make it look as if it was scanned, removing everything outside the paper? This is possible if we use prospective transformation that restores the image to a picture that is centered with the optical axis and does not contain any rotation, changes to aspect ratio, skew, or keystone distortion.
The picture is the letter sized paper, and thus aspect ratio is 8 x 11.</description>
    </item>
    
    <item>
      <title>How to Blur and Sharpen Color Image</title>
      <link>https://hchang18.github.io/posts/2023-03-01-how-to-smooth-and-sharpen-image/</link>
      <pubDate>Wed, 01 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://hchang18.github.io/posts/2023-03-01-how-to-smooth-and-sharpen-image/</guid>
      <description>Summary Read an image file and convert the image from one color space (e.g. BGR to RGB). Select the filter (e.g. Gaussian Kernel function or any custom filter) and apply to the image for smoothing effect. The bigger the kernel size, the blurrier an image will be. To sharpen the image, get the difference between original and blurred images and add back that difference with sharpened ratio of your choice. Getting Started with OpenCV # import libraries import cv2 import numpy as np import matplotlib.</description>
    </item>
    
  </channel>
</rss>
